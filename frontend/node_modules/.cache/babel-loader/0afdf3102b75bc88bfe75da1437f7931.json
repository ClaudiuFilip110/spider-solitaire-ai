{"ast":null,"code":"import linkedlist from './linkedlist';\nexport class card {\n  constructor(deck, value, show, active) {\n    this.deck = deck;\n    this.value = value;\n    this.show = show;\n    this.active = active;\n  }\n}\nexport const generateCards = () => {\n  const cardRank = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"];\n  let cards = [];\n  for (let index = 0; index < 8; index++) {\n    cardRank.forEach(item => {\n      cards.push(new card(index, item, false, false));\n    });\n  }\n  return cards;\n};\nexport const shuffleArray = array => {\n  for (let index = array.length - 1; index > 0; index--) {\n    const j = Math.floor(Math.random() * (index + 1));\n    [array[index], array[j]] = [array[j], array[index]];\n  }\n  return array;\n};\nexport const splitArray = cards => {\n  let card_split = [];\n  let temp = 0;\n  for (let index = 0; index < 10; index++) {\n    if (index < 4) {\n      card_split = [...card_split, [...cards.slice(index * 6 + 0, index * 6 + 6)]];\n    } else {\n      card_split = [...card_split, [...cards.slice(index * 6 + 0 - temp, index * 6 + 5 - temp)]];\n      temp += 1;\n    }\n  }\n  return card_split;\n};\nexport const getRemainingCards = array => {\n  return array.filter((item, index) => index >= 54);\n};\nexport const DisplayLastCards = card_initial => {\n  for (let index = 0; index < 10; index++) {\n    let element = card_initial[index];\n    while (element.next !== null) {\n      element = element.next;\n    }\n    element.val.show = true;\n  }\n};\n_c = DisplayLastCards;\nconst CardGenerator = () => {\n  // generate 8 deck of cards\n  let cards = generateCards();\n\n  // shuffle array\n  cards = shuffleArray(cards);\n\n  // split array by index then card_split will be 10 array of arrays\n  let card_split = splitArray(cards);\n\n  // then transform array to linked list \n  card_split = linkedlist(card_split);\n\n  // split decks to initial and remaining, initials: 6 6 6 6 5 5 5 5 5 5, rems: 50, rems will be in card holder, initials will display on board\n  const card_initial = card_split;\n  const card_rem = getRemainingCards(cards);\n\n  // last cards will display their value, others will close\n  DisplayLastCards(card_initial);\n  return {\n    card_initial,\n    card_rem\n  };\n};\n_c2 = CardGenerator;\nexport default CardGenerator;\nvar _c, _c2;\n$RefreshReg$(_c, \"DisplayLastCards\");\n$RefreshReg$(_c2, \"CardGenerator\");","map":{"version":3,"names":["linkedlist","card","constructor","deck","value","show","active","generateCards","cardRank","cards","index","forEach","item","push","shuffleArray","array","length","j","Math","floor","random","splitArray","card_split","temp","slice","getRemainingCards","filter","DisplayLastCards","card_initial","element","next","val","_c","CardGenerator","card_rem","_c2","$RefreshReg$"],"sources":["/Users/claudiufilip/Developer/personal-projects/spider-solitaire-ai/frontend/src/logic/CardGenerator.js"],"sourcesContent":["import linkedlist from './linkedlist'\n\nexport class card {\n    constructor(deck, value, show, active){\n        this.deck = deck;\n        this.value = value;\n        this.show = show;\n        this.active = active\n    }\n}\n\nexport const generateCards = () => {\n    const cardRank = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"];\n\n    let cards = []\n    for (let index = 0; index < 8; index++) {\n        cardRank.forEach((item) => {\n            cards.push(new card(index, item, false, false))\n        })\n    }\n    return cards\n}\n\nexport const shuffleArray = (array) => {\n    for (let index = array.length - 1; index > 0; index--) {\n        const j = Math.floor(Math.random() * (index + 1));\n        [array[index], array[j]] = [array[j], array[index]];\n    }\n    return array\n}\n\nexport const splitArray = (cards) => {\n    let card_split = []\n    let temp = 0\n    for (let index = 0; index < 10; index++) {\n        if (index < 4) {\n            card_split = [...card_split, [...cards.slice((index * 6) + 0, (index * 6) + 6)]]\n        } else {\n            card_split = [...card_split, [...cards.slice((index * 6) + 0 - temp, (index * 6) + 5 - temp)]]\n            temp += 1\n        }\n    }\n    return card_split\n}\n\nexport const getRemainingCards = (array) => {\n    return array.filter((item, index) => (index >= 54))\n}\n\nexport const DisplayLastCards = (card_initial) => {\n    for (let index = 0; index < 10; index++) {\n        let element = card_initial[index]\n        while (element.next !== null) {\n            element = element.next\n        }\n        element.val.show = true;\n    }\n}\n\nconst CardGenerator = () => {\n\n// generate 8 deck of cards\nlet cards = generateCards()\n\n// shuffle array\ncards = shuffleArray(cards)\n\n// split array by index then card_split will be 10 array of arrays\nlet card_split = splitArray(cards)\n\n// then transform array to linked list \ncard_split = linkedlist(card_split)\n\n// split decks to initial and remaining, initials: 6 6 6 6 5 5 5 5 5 5, rems: 50, rems will be in card holder, initials will display on board\nconst card_initial = card_split\nconst card_rem = getRemainingCards(cards)\n\n// last cards will display their value, others will close\nDisplayLastCards(card_initial)\n\nreturn {card_initial, card_rem}\n}\n\nexport default CardGenerator"],"mappings":"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"},"metadata":{},"sourceType":"module"}